import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import MinMaxScaler

tf.random.set_seed(1)

# Load the dataset
file_path = '/Users/scottsteele/SMM/SPY_stock_prices.csv'  # Update with your actual file path
df = pd.read_csv(file_path)

# Assuming 'Close' as the target, using 'Close' prices for simplicity
close_prices = df['Close'].values.reshape(-1, 1)

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(close_prices)

# Function to create sequences for LSTM, adjusted for direct 5-day prediction
def create_sequences(data, sequence_length, prediction_length=5):
    xs, ys = [], []
    for i in range(len(data) - sequence_length - prediction_length + 1):
        x = data[i:(i + sequence_length), 0]
        y = data[i + sequence_length + prediction_length - 1]  # Targeting the 'Close' price 5 days ahead
        xs.append(x)
        ys.append(y)
    return np.array(xs), np.array(ys)

sequence_length = 60  # Days to look back for prediction
X, y = create_sequences(scaled_data, sequence_length)

# Reshape the data for LSTM layer
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Split data into training and test sets
train_size = int(len(X) * 0.8)
X_train, X_test = X[0:train_size], X[train_size:]
y_train, y_test = y[0:train_size], y[train_size:]

# Define the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=False, input_shape=(sequence_length, 1)))
model.add(Dense(1))  # Output layer for direct prediction

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)

# Predict for the most recent sequence for a direct 5-day ahead forecast
last_sequence = scaled_data[-sequence_length:]
last_sequence_reshaped = np.reshape(last_sequence, (1, sequence_length, 1))
predicted_price_scaled = model.predict(last_sequence_reshaped)
predicted_price = scaler.inverse_transform(predicted_price_scaled)

# Assuming the last known date is the day before the start prediction date
last_known_date = df['Date'].iloc[-1]
start_prediction_date = pd.to_datetime(last_known_date) + pd.Timedelta(days=1)

print(f"Direct 5-day predicted price from {start_prediction_date.strftime('%Y-%m-%d')}: {predicted_price[0][0]}")

